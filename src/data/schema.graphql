scalar Date

type Session {
  id: ID!
  isLoggedIn: Boolean
  error: String
}

type Event {
  id: ID!
  date: Date!
  name: String!
  budget: Int!
  isArchived: Boolean!
  vendors: [Vendor!]!
}

enum VendorKinds {
  Venue
  AV
  Photographer
  Caterer
  Florist
  Other
}

type Contact {
  id: ID!
  name: String!
  phone: String!
  email: String!
}

type Vendor {
  id: ID!
  name: String!
  vendorKind: VendorKinds!
  location: String!
  contact: Contact!
}

enum EventFilterType {
  RECENT
  ALL
  ARCHIVED
}

type Query {
  session: Session!
  events(filterType: EventFilterType!, search: String): [Event!]!
  event(id: ID): Event!
}

input EventInput {
  name: String!
  date: Date!
  budget: Int!
  clients: [ContactInput!]!
}

input VendorInput {
  eventId: String!
  name: String!
  vendorKind: VendorKinds!
  location: String!
  contact: ContactInput!
}

input ContactInput {
  id: ID
  name: String
  email: String
  phone: String
}

type Mutation {
  signup(email: String!, password: String!): Session!
  login(email: String!, password: String!): Session!
  logout: Session!
  archiveEvent(id: ID, isArchived: Boolean): Event!
  createEvent(event: EventInput!): Event!

  createVendor(vendor: VendorInput!): Vendor!
  editVendor(id: ID!, vendor: VendorInput!): Vendor!
  deleteVendor(id: ID): ID
}