scalar Date

type Session {
  id: ID!
  isLoggedIn: Boolean
  error: String
}

type Event {
  id: ID!
  date: Date!
  name: String!
  budget: Int!
  isArchived: Boolean!
  vendors: [Vendor!]!
}

enum VendorKinds {
  Venue
  AV
  Photographer
  Caterer
  Florist
  Other
}

enum VendorContactKinds {
  Primary
  DayOf
  Other
}

type Contact {
  id: ID!
  name: String!
  phone: String!
  email: String!
}

type VendorContact {
  contact: Contact!
  contactKind: VendorContactKinds!
}

type BudgetItem {
  id: ID!
  item: String!
  quantity: Int!
  amount: Int!
}

type PaymentSchedule {
  id: ID!
  item: String!
  description: String!
  dueDate: Date!
  amount: Int!
  isPaid: Boolean!
}

type TimelineItem {
  id: ID!
  date: Date!
  description: String!
}

type Vendor {
  id: ID!
  name: String!
  vendorKind: VendorKinds!
  location: String!
  contacts: [VendorContact!]!
  budgetItems: [BudgetItem!]!
  paymentSchedule: [PaymentSchedule!]!
  timelineItems: [TimelineItem!]!
  notesRichTextId: ID
}

type RichText {
  id: ID!
  data: String!
}

enum EventFilterType {
  RECENT
  ALL
  ARCHIVED
}

type Query {
  session: Session!
  events(filterType: EventFilterType!, search: String): [Event!]!
  event(id: ID!): Event!
  vendor(id: ID!): Vendor!
  richText(id: ID!): RichText!
}

input RichTextInput {
  id: ID
  eventId: ID
  data: String!
}

input EventInput {
  name: String!
  date: Date!
  budget: Int!
  clients: [ContactInput!]!
}

input VendorInput {
  eventId: String!
  name: String!
  vendorKind: VendorKinds!
  location: String!
  contact: ContactInput
}

input BudgetItemInput {
  id: ID
  vendorId: ID!
  item: String!
  quantity: Int!
  amount: Int!
}

input PaymentScheduleInput {
  id: ID
  vendorId: ID!
  item: String!
  description: String!
  dueDate: Date!
  amount: Int!
  isPaid: Boolean!
}

input TimelineItemInput {
  id: ID
  vendorId: ID!
  date: Date!
  description: String!
}

input ContactInput {
  id: ID
  name: String
  email: String
  phone: String
}

input VendorContactInput {
  contact: ContactInput!
  contactKind: VendorContactKinds!
}

type Mutation {
  signup(email: String!, password: String!): Session!
  login(email: String!, password: String!): Session!
  logout: Session!
  archiveEvent(id: ID, isArchived: Boolean): Event!
  createEvent(event: EventInput!): Event!

  createVendor(vendor: VendorInput!): Vendor!
  editVendor(id: ID!, vendor: VendorInput!): Vendor!
  deleteVendor(id: ID): ID

  upsertVendorContact(vendorId: ID!, vendorContact: VendorContactInput!): Vendor!
  deleteVendorContact(vendorId: ID!, contactId: ID!): Vendor!

  upsertBudgetItem(budgetItem: BudgetItemInput!): Vendor!
  deleteBudgetItem(id: ID!): Vendor!

  upsertPaymentSchedule(paymentSchedule: PaymentScheduleInput!): Vendor!
  deletePaymentSchedule(id: ID!): Vendor!

  upsertTimelineItem(timelineItem: TimelineItemInput!): Vendor!
  deleteTimelineItem(id: ID!): Vendor!

  updateVendorNote(id: ID!, notesRichTextId: ID!): Vendor!

  upsertRichText(richText: RichTextInput!): RichText!
}